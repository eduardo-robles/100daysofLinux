#+TITLE: Log
#+AUTHOR: Eduardo Robles
#+OPTIONS: num:nil

* #100DaysofLinux Challenge
If you want cheer me along follow me on [[https://twitter.com/mrerwtc][twitter]] or buy me a coffee ☕
[[https://ko-fi.com/G2G6S2IC][https://ko-fi.com/img/githubbutton_sm.svg]]

-----
* Day 1 of 100: 05/22/2019
** Adding SSH keys to Github and Gitlab
I got tired of having to enter my Github or Gitlab credentials every single time
I made a push to my remote repos. So I decided create some SSH keys and add them
so I can authenticate that way instead.

Turns out it's actually really easy to authenticate with SSH keys. Both Github
and Gitlab have great documentation on how to do this. I will leave links in the
"links" section. So let's see how Github does it.

*** Adding SSH keys to Github
1. Generate a new key
   ~ssh-keygen -t rsa -b 4096 -C "francisco@panchovilla.com~ enter you email in
   the email portion.
2. You will be prompted to "Enter a file in which to save the key...". Simply
   hit ~[ENTER]~ if you want the default else give the file a specific name. In
   my case I gave it a specific name since I will be have a key for Gitlab as
   well.
3. Next you will be prompted for passphrase. Enter a good one and remember to
   save in your password manager or somewhere safe.
4. Now copy the contents of you ssh public key to your clipboard. There a bunch
   of ways of doing this so chose the easiest for you. REMEMBER COPY THE PUBLIC
   KEY!! I did it like this... ~cat ~/.ssh/id_rsa_githubkey.pub~
5. Go to your Github Settings page and find the section on SSH keys. Click on
   "New SSH Key" and paste the contents of your public SSH key into the text
   box.
6. Click on "Add SSH key" to confirm the changes.
7. Test if the key works with ~ssh -T git@github.com~. If you are prompted with
   the usual SSH Authentication message then you know you did things correctly.
8. Confirm the SSH Authentication and you should be prompted with a message that
   reads

   #+begin_quote
   Hi yourUsername! You've successfully authenticated, but GitHub does not
   provide shell access.
   #+end_quote

And that's it! You've successfully added you SSH key to Github. Now when I push
a commit to Github I'm not bothered to enter my credentials.
*** Links:
- https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
- https://gitlab.com/help/ssh/README#generating-a-new-ssh-key-pair
*** Notes: Adding SSH keys is basically the same for Gitlab. You can follow along with the link I provided if you need more guidance.

* Day 2 of 100: 05/23/2019
** Manage a Gitlab and Github account on one computer
So after adding my SSH keys to Gitlab and Github I needed a way to tell my local
git configurations when and how to use them. This is not that complicated but it
is a bit of work to setup and is not fully automated. You will have to configure
your SSH config and setup some ~bash~ aliases. There are plenty of other ways to
do this but this works for me.

Once you have your SSH keys setup for Gitlab and Github it's time to edit your
SSH config to use them accordingly.
1. Edit your SSH config with your favorite editor.
2. Below is an example of my config, edit yours to fit your setup.

#+begin_src bash
# Github Account
Host github.com
     HostName github.com
     PreferredAuthentication publickey
     IdentityFile ~/.ssh/githubPublickeyFile

# Gitlab Account
Host gitlab.com
     HostName gitlab.com
     PreferredAuthentication publickey
     IdentityFile ~/.ssh/gitlabPublickeyFile
#+end_src

Now you have to manually tell git to configure your ~user.email~ per project. In
order to do this you have to setup some ~bash~ aliases.

1. Setup an aliases for Github and Gitlab

#+begin_src bash
alias gh='git config user.email diana@wonderwoman.com'
alias gl='git config user.email bruce@imbatman.com'
#+end_src

In this example I setup ~alias gh~ as my alias for Github and ~alias gl~ for
Gitlab. You can name your aliases whatever you chose, also remember to set the
correct email for Github or Gitlab. Also if you want, you can set in your
~.gitconfig~ a default ~user.email~ configuration just in case you forget to run
these aliases in your project folders.

*Pro tip:* If you need to change your ~user.email~ for a giving project simply
 use ~git commit --amend --reset-author~

 And that's it! You now have 2 SSH keys for Github and Gitlab and your system
 can find the correct keys depending on the project.

*** Links:
- https://everythingsysadmin.com/2017/01/two-github-accounts.html
*** Notes: If you are using a different shell then setup aliases that work in that shell.

* Day 3 of 100: 05/24/2019
** Changing a Git project Remote URL
So the past 2 days I've setup SSH keys to authenticate with Github and Gitlab.
The only problem was I needed to update my local cloned repos to use SSH
authentication instead of HTTPS. This is an easy task and can be done on a per
repo basis.

In order to change the remote url's you will have to go into the local directory
of your project in the terminal. Check the remote url of the project with this
command  ~git remote -v~. Here's the difference between HTTPS and SSH remote
urls.

*HTTPS*
#+begin_src bash
origin  https://github.com/USERNAME/REPOSITORY.git (fetch)
origin  https://github.com/USERNAME/REPOSITORY.git (push)
#+end_src

*SSH*
#+begin_src bash
origin  git@github.com:USERNAME/REPOSITORY.git (fetch)
origin  git@github.com:USERNAME/REPOSITORY.git (push)
#+end_src

Here's how to change a remote from HTTPS to SSH
~git remote set-url origin git@github.com:USERNAME/REPOSITORY.git~

And that's it! With this little trick you can easily switch between HTTPS and
SSH for your remote URL's
*** Links
- https://help.github.com/en/articles/changing-a-remotes-url
- https://confluence.atlassian.com/bitbucket/change-the-remote-url-to-your-repository-794212774.html
*** Notes
* Day 4 of 100: 5/27/2019
** Sign Git commits with a GPG/PGP key
Continuing with my work on understanding Git, I wanted to add a GPG key to my
Gitlab account. I want sign my commits so they are verified by me. Doing so is
not so hard and only takes a few minutes. As a bonus I'm going to use the PGP
key created in my [[https://keybase.io/eduardorobles][Keybase]] account.

Let's get started by making sure we have Keybase ang GPG installed. You should
follow the instructions to install Keybase or GPG for your OS. Both apps are
available in Linux, MacOS, and Windows. Once both are installed you can begin
importing the PGP key to you system. I'm on Ubuntu 18.04 so these command are
for most Linux systems.

- Import the Public Key
  ~keybase pgp export | gpg --import~

- Export the Private Key
  ~keybase pgp export -s | gpg --allow-secret-key-import --import~


During the second command you will prompted to create a passphrase. This is done
so your local GPG system can add extra security to your GPG keys. This
passphrase is for your local keyring, be sure to save it in your password manager.

Now you will need to print out the contents of your Public key so you can add it
to Gitlab. If you are using Keybase simply check your public profile for your
Public Key. Else you can use the following commands to get your Public key.

- If you want to save it to a TXT file
  ~gpg --armor --export user@emailforkey.com > userPublicKey.txt~

- If you want to print it out on the terminal
  ~cat | gpg --armor --export user@emailforkey.com~

Next you will add the *Public* key to your Gitlab account. In Gitlab go to your
user settings > GPG keys > Add a GPG key.

Here you will be promted with a text box to enter your Public key. Simply copy
and paste the contents of you Public key and your done! Well almost...you need
to tell your local Git to use the GPG key to sign commits.

- Add the key to your global user settings
  ~gpg config --global user.signingkey KEYID~ <- KEYID is of your GPG key pair

- Tell git to prompt for commit signing
  ~gpg config --global commit.gpgsign true~
  
And that's it!

*** Links
- https://gitlab.com/help/user/project/repository/gpg_signed_commits/index.md
- https://www.elliotblackburn.com/importing-pgp-keys-from-keybase-into-gpg/

*** Notes: If you don't have a Keybase account, simply create a GPG key pair on your system.

* Day 5 of 100: 5/28/2019
** Encrypting your data with LUKS
Learning to encrypt your hard drive is very important in the security space. Not
only is it a good idea to encrypt but it's very easy to do so. So I did some
research and found a good way to get started with encrypting your hard drive
with LUKS.

1. Let's get started by installing LUKS on Ubuntu 18.04
~sudo apt install cryptsetup~

It's helpful to know what partitions are on your system. Simply use the command
~lsblk~ to do so.

2. Now is time to encrypt a partition
~sudo cryptsetup --verbose --verify-passphrase luksFormat /dev/sdbX~
 - /where X is the number of partition, unless there's only a single partition/
 - You will also be promted to enter a passphrase, be sure to make it a strong
   one and to save it in your password manager.

3. Open the encrypted partition so you can work with it
~sudo cryptsetup luksOpen /dev/sdbX sdbX~

4. If this is a new hard drive you will need to create a filesystem on that
   partition
~sudo mkfs.ext4 /dev/mapper/sdbX~

Now you are done with creating an encrypted partition. Let's see if we can save
files to the partition.

1. Create a new empty directory in the encrypted partition
~sudo mkdir /mnt/secure~
~sudo mount /dev/mapper/sdbX /mnt/secure~

2. Create a text file in that new directory
~sudo touch /mnt/secure/test.txt~

3. (Optional) You can change the permissions in this encrypted partition so your
   regular system user can access it without ~Sudo~ privildeges.
~sudo chown -R `whoami`:users /mnt/secure~

 - Test permissions by creating an empty file without ~sudo~ permissions ~touch
   /mnt/secure/test2.txt~ if this worked, then you can create and move files
   into the partition without the need for ~sudo~ privildeges.

Let's unmount the partition and make sure LUKS closes the encrypted partititon.

1. Unmount the partition ~sudo unmount /dev/mapper/sdbX~
2. Close the encrypted partition ~sudo cryptsetup luksClose sdbX~

And that's it!
*** Links
- https://www.stxlug.com/meetup-4-20-19/
*** Notes

* Day 6 of 100: 5/29/2019
** Adding Github Badges in Org files
Github uses Markdown as it's syntax styling for any regular documents. So when
you are creating your README files or LICENSE files writing them in markdown
allows Github to automatically format them. But for this challenge I'm using
Emacs + Org-mode. Org is another great text based syntax and [[https://org-mode.com][Org-mode]] is simply
too amazing to try to explain here.

The problem is that Org is not Markdown so Github renders it slightly
differently. The cool thing about Org-mode is it's exporting functions which
export to Markdown. But I wanted to keep all of my notes and Log in Org syntax. So
I ran into a small issue when I wanted to add a Github Badge to my org file.

Github Badges are primarily written in markdown. I did some research and I
couldn't find much info on how to add markdown badges in org files. You could do
multiple things, like use the ~export~ function. Or you could use the ~src~
block feauture and add the badge as an HTML snippet.

I did a quick little test and found that I could simply redo the markdown format
in org format and the badge works! But I was reminded by a reddit post that [[https://melpa.org][MELPA]] shows you
badges in all [[https://github.com/eduardo-robles/100daysofLinux/blob/master/Round-1/img/orgBadges.png][three]] formats. So I felt a little silly for overthinking this
problem. But luckily I was able to find a solution. Below is an example of a
Badge in Markdown syntax and another example in Org syntax.

- In Markdown syntax
~[![ko-fi](https://www.ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/G2G6S2IC)~

- In Org Syntax
~[[https://ko-fi.com/G2G6S2IC][https://ko-fi.com/img/githubbutton_sm.svg]]~

- Actual Badge
[[https://ko-fi.com/G2G6S2IC][https://ko-fi.com/img/githubbutton_sm.svg]]

The formats look similar but are quite different. I also found out via the reddi
that you can use /Macros/ in an Org file to basically add these badges as well.
But I've had limited success with this. I'll have to do a bit more research to
get this working. In the end I was able to figure it out another way. And now I
can show badges in org files. And that's it!

*** Links
- https://melpa.org/#/org2blog
*** Notes
- If you feel awesome 👍 you can keep me going and buy me a coffee ☕ Thanks!
* Day 7 of 100: 5/30/2019
** My Emacs Setup
I use Emacs as my all around text editor and it is extremely powerful. Before I
began using Emacs I was jumping back and forth between Vim, Gedit, and Kwrite.
All of those text editors are great but Emacs has features that just blew me
away.

One of those features is an amazing package called *Org-mode*. Org-mode is
system for organizing and formating notes. But Org-mode is much more because
it's functionality includes a Word Processor, Calendar, Agenda, and document
exporter.

You combine that with other Emacs packages like [[https://magit.vc][Magit]] or [[https://github.com/org2blog/org2blog][org2blog]] you got one
awesome text editor. Basically I use Emacs for writing my notes, managing my
Github/Gitlab remote repos, and blogging in Wordpress. Emacs is totally awesome
but it has a very steep learning curve. To make the learning curve a bit easier
I use an Emacs configuration called ~Doom~!

[[https://github.com/hlissner/doom-emacs][Doom]] is great and most importantly it's /FAST!/ With Doom you have ~Evil-mode~
which adds the Vim keybinding to Emacs. Doom basically makes using Emacs
easier and includes a bunch of amazing goodies. So I'd like to show you how to
install it (in Ubuntu 18.04) so you can give it a try.

- Install Emacs 26+

~sudo add-apt-repository ppa:kelleyk/emacs~

~sudo apt update~

~sudo apt install emacs26~

- Run Emacs once before installing Doom

~emacs~

- Clone Doom Emacs Config

~git clone https://github.com/hlissner/doom-emacs ~/.emacs.d~

- Install Doom

~cd .emacs.d/bin~

~doom quickstart~

- Run Emacs again and you should be prompted with Doom

[[https://raw.githubusercontent.com/eduardo-robles/100daysofLinux/master/Round-1/img/myEmacs.png]]

So now you have a Doom Emacs installed and you can get started with managing
remote git repos with Magit or start writing Org documents. Check out the Doom
Github page for info on what else Doom is capable of. And that's it!

*** Links
- https://github.com/hlissner/doom-emacs
- https://magit.vc/
- https://github.com/org2blog/org2blog
*** Notes
- If you feel awesome 👍 you can keep me going and buy me a coffee ☕ Thanks! [[https://ko-fi.com/G2G6S2IC][https://ko-fi.com/img/githubbutton_sm.svg]]
* Day 8 of 100: 6/4/2019
** Convert OVA to QCOW2 format
When working with virtual machine file formats you have several different
options. OVA is a common one but not one that is easily supported with KVM. So
how do get around this issue? Simple, convert it to QCOW2 format. Let's see just
how easy it is in Ubuntu 18.04.

- Install ~QEMU-Utils~

~sudo apt-get install qemu-utils~

- Now extract your OVA image

~tar -xvf VMexampleimage.ova~

This step will result in 2 extracted files. You will either have a ~VMDK~ or ~VDI~
file along with an ~OVF~ file. You will either use the ~VDI~ or ~VMDK~ file to
convert into a ~QCOW2~ file.

- Convert a ~VDI~ to ~QCOW2~

~qemu-img convert -O qcow2 input.vdi output.qcow2~

- Convert a ~VMDK~ to ~QCOW2~

~qemu-img convert -O qcow2 input.vmdk output.qcow2~

Now you have a ~QCOW2~ that can be easily used in KVM. Plus QCOW2 is also a
widely supported format so many popular hypervisors support it. And that's it!

*** Links
- http://ask.xmodulo.com/convert-ova-to-qcow2-linux.html

*** Notes
